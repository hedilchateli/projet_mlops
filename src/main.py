import mlflow
import mlflow.sklearn
from model_pipeline import (
    prepare_data,
    train_model,
    evaluate_model,
    save_model,
)


def setup_mlflow():
    """Configure MLflow avec l'URI de suivi et le nom de l'exp√©rience."""
    mlflow.set_tracking_uri("http://127.0.0.1:5000")  # Serveur MLflow local
    mlflow.set_experiment("Churn Prediction")  # Nom de l'exp√©rience


# Chemins des fichiers CSV sous WSL
file_path_1 = "/home/hedil/hedil_ch_4DS3_mlproject/data/churn-bigml-80.csv"
file_path_2 = "/home/hedil/hedil_ch_4DS3_mlproject/data/churn-bigml-20.csv"


def main():
    """Fonction principale pour pr√©parer les donn√©es, entra√Æner et √©valuer le mod√®le."""
    try:
        # 1Ô∏è‚É£ Configuration MLflow
        setup_mlflow()

        # 2Ô∏è‚É£ Pr√©paration des donn√©es
        print("üöÄ Pr√©paration des donn√©es...")
        X_train, X_test, y_train, y_test = prepare_data(file_path_1, file_path_2)
        print("‚úÖ Donn√©es pr√©par√©es avec succ√®s !")

        # 3Ô∏è‚É£ Entra√Ænement du mod√®le
        print("\nüöÄ Entra√Ænement du mod√®le Random Forest...")
        with mlflow.start_run():  # D√©but du tracking MLflow

            # üîπ Enregistrement des hyperparam√®tres
            mlflow.log_param("model_type", "RandomForestClassifier")
            mlflow.log_param("n_estimators", 100)  # Exemple d'hyperparam√®tre

            # üîπ Entra√Ænement du mod√®le
            model = train_model(X_train, y_train)
            print("‚úÖ Mod√®le entra√Æn√© avec succ√®s !")

            # 4Ô∏è‚É£ √âvaluation du mod√®le
            print("\nüöÄ √âvaluation du mod√®le...")
            accuracy, report, matrix = evaluate_model(model, X_test, y_test)

            # üîπ Enregistrement des m√©triques
            mlflow.log_metric("accuracy", accuracy)
            mlflow.log_metric("precision", report["weighted avg"]["precision"])
            mlflow.log_metric("recall", report["weighted avg"]["recall"])
            mlflow.log_metric("f1_score", report["weighted avg"]["f1-score"])

            # üîπ Cr√©ation de l'exemple d'entr√©e (on utilise une ligne d'entr√©es)
            input_example = X_test.iloc[0].to_dict()

            # üîπ Enregistrement du mod√®le dans MLflow
            signature = mlflow.models.signature.infer_signature(X_train, model.predict(X_train))
            print("‚úÖ Signature du mod√®le cr√©√©e avec succ√®s !")

            # Enregistrement du mod√®le avec l'exemple d'entr√©e et la signature
            mlflow.sklearn.log_model(
                model,
                "random_forest_model",
                signature=signature,
                input_example=input_example
            )
            print("‚úÖ Mod√®le enregistr√© dans MLflow avec signature et exemple d'entr√©e !")

        # 5Ô∏è‚É£ Sauvegarde du mod√®le en local
        print("\nüöÄ Sauvegarde du mod√®le...")
        save_model(
            model,
            filename="/home/hedil/hedil_ch_4DS3_mlproject/models/random_forest.pkl"
        )
        print("‚úÖ Mod√®le sauvegard√© avec succ√®s !")

    except FileNotFoundError as e:
        print(f"‚ùå Erreur : {e}")
    except Exception as e:
        print(f"‚ùå Une erreur s'est produite : {e}")


if __name__ == "__main__":
    main()
